{
    "docs": [
        {
            "location": "/", 
            "text": "NDI PLATFORMS\n\n\n\n\nNDIplatforms is a set of makefiles structured for easy maintenance.  It is used,\nalong with the \nAegir Hosting System\n, to maintain\nNDI's \nDemTools\n mass-hosting platform, DemCloud.\n\n\nNormal usage of NDIplatforms involves simply running Drush Make with one of the\nsupplied \"lock\" files.  Lockfiles are simply makefiles with all versions\ncompletely specified.  Further instructions can be found in docs/USAGE.md.\n\n\nNDIplatforms uses a particular directory layout to make maintaining makefiles\neasier.  For a discussion on the reasoning behind this, see docs/STRUCTURE.md.\n\n\nThe maintenance of NDIplatforms leverages a number of features that are new to\nDrush 7, along with a custom Drush extension, make_diff.  See docs/INSTALL.md\nfor a detailed walk-through of installing NDIplatforms and its dependencies.\n\n\nA specific workflow was developed to maintain the \"lock\" files.  This workflow\nis described in docs/MAINTENANCE.md.\n\n\nThis documentation is managed with \nmkdocs\n. For\ninformation on getting started, see docs/DOCUMENTATION.md.", 
            "title": "Home"
        }, 
        {
            "location": "/#ndi-platforms", 
            "text": "NDIplatforms is a set of makefiles structured for easy maintenance.  It is used,\nalong with the  Aegir Hosting System , to maintain\nNDI's  DemTools  mass-hosting platform, DemCloud.  Normal usage of NDIplatforms involves simply running Drush Make with one of the\nsupplied \"lock\" files.  Lockfiles are simply makefiles with all versions\ncompletely specified.  Further instructions can be found in docs/USAGE.md.  NDIplatforms uses a particular directory layout to make maintaining makefiles\neasier.  For a discussion on the reasoning behind this, see docs/STRUCTURE.md.  The maintenance of NDIplatforms leverages a number of features that are new to\nDrush 7, along with a custom Drush extension, make_diff.  See docs/INSTALL.md\nfor a detailed walk-through of installing NDIplatforms and its dependencies.  A specific workflow was developed to maintain the \"lock\" files.  This workflow\nis described in docs/MAINTENANCE.md.  This documentation is managed with  mkdocs . For\ninformation on getting started, see docs/DOCUMENTATION.md.", 
            "title": "NDI PLATFORMS"
        }, 
        {
            "location": "/INSTALL/", 
            "text": "NDI PLATFORMS\n\n\nDownload NDIplatforms\n\n\nDownload NDIplatforms somewhere convenient, such as:\n\n\n$ git clone https://github.com/nditech/NDIplatforms.git ~/makefiles/NDIplatforms\n\n\n\nInstall Drush 7.x\n\n\nTo use the latest version of NDIplatforms effectively, you need a recent version\nof Drush, as well as a custom Drush extension.  As such, we recommend using a\nlocal Drush install, so as not to interfere with other Drush functionality on\nthe server.\n\n\n$ git clone --branch 7.x https://github.com/drush-ops/drush.git ~/drush7\n$ cd ~/drush7\n$ curl -sS https://getcomposer.org/installer | php\n$ php ./composer.phar install\n$ alias drush7=\"~/drush7/drush\"\n\n\n\nYou can test whether the \"drush7\" alias is working like so:\n\n\n$ drush7 status\n PHP configuration      :  /etc/php5/cli/php.ini\n PHP OS                 :  Linux\n Drush version          :  7.0-dev\n Drush temp directory   :  /tmp\n Drush configuration    :\n Drush alias files      :\n\n\n\nIf you are running PHP with the suhosin module, you may have to pass the PHP\nCLI an option to allow .phar files:\n\n\n-d suhosin.executor.include.whitelist=phar\n\n\n\nInstall make_diff\n\n\nThe \"make_diff\" extension allows two makefiles to be compared easily. To\ninstall it, simply run the following command:\n\n\n$ drush dl make_diff", 
            "title": "Install"
        }, 
        {
            "location": "/INSTALL/#ndi-platforms", 
            "text": "", 
            "title": "NDI PLATFORMS"
        }, 
        {
            "location": "/INSTALL/#download-ndiplatforms", 
            "text": "Download NDIplatforms somewhere convenient, such as:  $ git clone https://github.com/nditech/NDIplatforms.git ~/makefiles/NDIplatforms", 
            "title": "Download NDIplatforms"
        }, 
        {
            "location": "/INSTALL/#install-drush-7x", 
            "text": "To use the latest version of NDIplatforms effectively, you need a recent version\nof Drush, as well as a custom Drush extension.  As such, we recommend using a\nlocal Drush install, so as not to interfere with other Drush functionality on\nthe server.  $ git clone --branch 7.x https://github.com/drush-ops/drush.git ~/drush7\n$ cd ~/drush7\n$ curl -sS https://getcomposer.org/installer | php\n$ php ./composer.phar install\n$ alias drush7=\"~/drush7/drush\"  You can test whether the \"drush7\" alias is working like so:  $ drush7 status\n PHP configuration      :  /etc/php5/cli/php.ini\n PHP OS                 :  Linux\n Drush version          :  7.0-dev\n Drush temp directory   :  /tmp\n Drush configuration    :\n Drush alias files      :  If you are running PHP with the suhosin module, you may have to pass the PHP\nCLI an option to allow .phar files:  -d suhosin.executor.include.whitelist=phar", 
            "title": "Install Drush 7.x"
        }, 
        {
            "location": "/INSTALL/#install-make_diff", 
            "text": "The \"make_diff\" extension allows two makefiles to be compared easily. To\ninstall it, simply run the following command:  $ drush dl make_diff", 
            "title": "Install make_diff"
        }, 
        {
            "location": "/USAGE/", 
            "text": "NDI PLATFORMS\n\n\nThis document describes building platforms using the NDIplatforms stub Drush\nmakefiles.  To understand how these makefiles are maintained, please see\ndocs/MAINTENANCE.md.\n\n\nUSAGE\n\n\nFor simplicity, we use the (hypothetical) \"stubs/ndi-polls.make\" makefile in\nour examples.  Obviously, replace this with whichever platform stub makefile\nis appropriate.\n\n\nTo build a platform (also referred to as a code-base), we use Drush make along\nwith our lockfiles.  A lockfile is simply a type of makefile generated by Drush,\nthat specifies all the versions for all the included projects.\n\n\nIn order to be able to build the same platform in a repeatable fashion, we use\nlockfiles, since they are fully specified.  Also, this allows us to build plat-\nforms using the lockfiles remotely, without having to be concerned with any\nincludes being specified locally.  For example, we can use the raw output of a\ngit repository containing such a lockfile, and be confident that the platform\nthat is built will be identical to one built right after that commit.\n\n\nBuild a platform on the command-line\n\n\nWe start by simply calling Drush make (usually as the \"aegir\" user):\n\n\n$ drush make ~/makefiles/NDIplatforms/locks/ndi-polls.lock.yml ~/platforms/DemTools_2015-10-21\n\n\n\nAssuming that the platform build worked, we need to tell Aegir about it.\nThe easiest way to do that is to visit /node/add/platform on the Aegir site.\nWe then need to provide a name, such as \"DemTools_2015-10-21\", and specify\nthe path where we built it.\n\n\nThis can also be accomplished at the command-line by running the provision-save\nand hosting-import Drush commands provided by Aegir.  However, this is a very\nadvanced technique which we will not cover here.  Use the \"--help\" option with\nthese commands to see how they work.\n\n\nBuild a platform in the Aegir UI\n\n\nAlternatively, we can build the platform directly from within the Aegir UI.\nThis is the preferred method, as it:\n\n\n\n\nmakes the output of the platform build available in the task log;\n\n\ncreates a link to the makefile that was used in building the platform; and\n\n\navoids having to import the platform separately.\n\n\n\n\nHowever, some YAML makefiles require Drush 8, which only shipped with Aegir\nDebian packages starting in version 3.4. As a result, building fro the command\nline may be required, if you are using an older version.\n\n\nFirst, find the lockfile we want to use to build the platform on Github, such\nas https://github.com/nditech/NDIplatforms/blob/master/locks/ndi-polls.lock.yml.\nThen click the \"Raw\" button to get a link to the output that Drush Make can\naccept.  Copy that URL into the \"makefile\" field on \"/node/add/platform\" on the\nAegir site.  Then provide a meaningful name, such as \"DemTools_2015-10-21\", and\nclick \"Save\".\n\n\nThat should be all that is required.  In the background, Aegir will download the\nmakefile, run Drush Make, and register the platform.  You should see a link to\nthe makefile used in creating the platform.  This is useful to determine the\nexact platform contents, or for re-creating the platform elsewhere, such as on\na different server.", 
            "title": "Usage"
        }, 
        {
            "location": "/USAGE/#ndi-platforms", 
            "text": "This document describes building platforms using the NDIplatforms stub Drush\nmakefiles.  To understand how these makefiles are maintained, please see\ndocs/MAINTENANCE.md.", 
            "title": "NDI PLATFORMS"
        }, 
        {
            "location": "/USAGE/#usage", 
            "text": "For simplicity, we use the (hypothetical) \"stubs/ndi-polls.make\" makefile in\nour examples.  Obviously, replace this with whichever platform stub makefile\nis appropriate.  To build a platform (also referred to as a code-base), we use Drush make along\nwith our lockfiles.  A lockfile is simply a type of makefile generated by Drush,\nthat specifies all the versions for all the included projects.  In order to be able to build the same platform in a repeatable fashion, we use\nlockfiles, since they are fully specified.  Also, this allows us to build plat-\nforms using the lockfiles remotely, without having to be concerned with any\nincludes being specified locally.  For example, we can use the raw output of a\ngit repository containing such a lockfile, and be confident that the platform\nthat is built will be identical to one built right after that commit.", 
            "title": "USAGE"
        }, 
        {
            "location": "/USAGE/#build-a-platform-on-the-command-line", 
            "text": "We start by simply calling Drush make (usually as the \"aegir\" user):  $ drush make ~/makefiles/NDIplatforms/locks/ndi-polls.lock.yml ~/platforms/DemTools_2015-10-21  Assuming that the platform build worked, we need to tell Aegir about it.\nThe easiest way to do that is to visit /node/add/platform on the Aegir site.\nWe then need to provide a name, such as \"DemTools_2015-10-21\", and specify\nthe path where we built it.  This can also be accomplished at the command-line by running the provision-save\nand hosting-import Drush commands provided by Aegir.  However, this is a very\nadvanced technique which we will not cover here.  Use the \"--help\" option with\nthese commands to see how they work.", 
            "title": "Build a platform on the command-line"
        }, 
        {
            "location": "/USAGE/#build-a-platform-in-the-aegir-ui", 
            "text": "Alternatively, we can build the platform directly from within the Aegir UI.\nThis is the preferred method, as it:   makes the output of the platform build available in the task log;  creates a link to the makefile that was used in building the platform; and  avoids having to import the platform separately.   However, some YAML makefiles require Drush 8, which only shipped with Aegir\nDebian packages starting in version 3.4. As a result, building fro the command\nline may be required, if you are using an older version.  First, find the lockfile we want to use to build the platform on Github, such\nas https://github.com/nditech/NDIplatforms/blob/master/locks/ndi-polls.lock.yml.\nThen click the \"Raw\" button to get a link to the output that Drush Make can\naccept.  Copy that URL into the \"makefile\" field on \"/node/add/platform\" on the\nAegir site.  Then provide a meaningful name, such as \"DemTools_2015-10-21\", and\nclick \"Save\".  That should be all that is required.  In the background, Aegir will download the\nmakefile, run Drush Make, and register the platform.  You should see a link to\nthe makefile used in creating the platform.  This is useful to determine the\nexact platform contents, or for re-creating the platform elsewhere, such as on\na different server.", 
            "title": "Build a platform in the Aegir UI"
        }, 
        {
            "location": "/STRUCTURE/", 
            "text": "NDI PLATFORMS\n\n\nThis document describes the filesystem layout for NDIplatforms Drush makefiles.\nTo understand how to use them to build platforms, please see docs/USAGE.md.\nTo better understand how these makefiles are maintained, please see\ndocs/MAINTENANCE.md.\n\n\nSTRUCTURE\n\n\nFor simplicity, we are limiting our discussion to the DemTools Civi platform.\nSeveral more platforms are included in NDIplatforms, and this system scales\nvery well.  However, listing them all here would complicate explanations.\n\n\nFilesystem layout\n\n\nDrush makefiles allow for the inclusion of other makefiles.  In order to reduce\nduplication and encourage these makefiles to be self-documenting, NDIplatforms\nmakes extensive use of makefile includes.\n\n\nHere is the (abridged) layout of files and directories:\n\n\n$ tree\n.\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 ...\n\u251c\u2500\u2500 includes\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 civicrm\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 civicrm.make.yml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 custom.make.yml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 ...\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dkan\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 ...\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 drupal\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 core.7.make.yml\n\u2502\u00a0\u00a0     ...\n\u251c\u2500\u2500 locks\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 civicrm.lock.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 demtools-civi.lock.yml\n\u2502\u00a0\u00a0 ...\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 drupal7.lock.yml\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 stubs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 civicrm.make.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 demtools-civi.make.yml\n\u2502\u00a0\u00a0 ...\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 drupal7.make.yml\n\u2514\u2500\u2500 tmp\n    \u2514\u2500\u2500 drush\n\n\n\nThere are 4 top-level directories: docs, includes, locks and stubs.  We examine\nthese in more detail later.  The locks and stubs directories simply contain\nlockfiles in the former, and stub makefiles in the latter, with no further\nhierarchy.\n\n\nThe \"includes\" directory, on the other hand, has subdirectories that contain\nmakefiles specific to each product.\n\n\nStubs\n\n\nStubs are makefiles that usually do not contain any projects to download\ndirectly.  Instead, they include a version of core, and various other makefiles\nto build up a full platform.\n\n\nIn the example below, we see that the contents are pretty basic.  There is\ndocumentation throughout, as well as the basic Drush make \"api\" and \"core\"\nelements.  We also set a default sub-directory within which to download\nprojects.  This allows us to keep our included makefiles cleaner.\n\n\nWe then include a core makefile, module, civicrm, and extensions makefiles and a\ntheme makefile.  Note that we specify the location of the include file relative\nto the location of the stub.\n\n\ncore = 7.x\napi = 2\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;               Core               ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nincludes[] = ../includes/core.make\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;             Defaults             ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n; Specify common subdir\ndefaults[projects][subdir] = \"contrib\"\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;         Released Modules         ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nincludes[] = ../includes/modules.make\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;           CiviCRM core           ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nincludes[] = ../includes/civicrm.make\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;        CiviCRM Extensions        ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nincludes[] = ../includes/civicrm-extensions.make\n\n\n\nIncludes\n\n\nIn the includes directory we find a core makefile that includes a core\ndistribution and any patches we need to apply to Drupal.  These included\nmakefiles have standard headers similar to the stub makefile above.\n\n\nIn modules.make, we have a general list of modules.  This makefile lists all\nthe modules that will be downloaded as part of the platform.  We segment\nrelated modules into their own dedicated makefiles, if this helps organization\nor re-use.\n\n\nLockfiles\n\n\nFinally, the lockfiles directory includes makefiles that have been run through\n\"drush make-lock\" (see docs/MAINTENANCE.md).  This basically takes our stub\nmakefile, compiles all the inclusions, and then checks with drupal.org to\ndetermine the latest versions of all the components, just as if they were all\ngoing to be downloaded in a normal run of Drush make.  It then writes this out\ninto a new makefile that now specifies all the up-to-date versions.  This form\nof makefile is called a lockfile, similar to what we see with Composer or Gem.", 
            "title": "Structure"
        }, 
        {
            "location": "/STRUCTURE/#ndi-platforms", 
            "text": "This document describes the filesystem layout for NDIplatforms Drush makefiles.\nTo understand how to use them to build platforms, please see docs/USAGE.md.\nTo better understand how these makefiles are maintained, please see\ndocs/MAINTENANCE.md.", 
            "title": "NDI PLATFORMS"
        }, 
        {
            "location": "/STRUCTURE/#structure", 
            "text": "For simplicity, we are limiting our discussion to the DemTools Civi platform.\nSeveral more platforms are included in NDIplatforms, and this system scales\nvery well.  However, listing them all here would complicate explanations.", 
            "title": "STRUCTURE"
        }, 
        {
            "location": "/STRUCTURE/#filesystem-layout", 
            "text": "Drush makefiles allow for the inclusion of other makefiles.  In order to reduce\nduplication and encourage these makefiles to be self-documenting, NDIplatforms\nmakes extensive use of makefile includes.  Here is the (abridged) layout of files and directories:  $ tree\n.\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 ...\n\u251c\u2500\u2500 includes\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 civicrm\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 civicrm.make.yml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 custom.make.yml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 ...\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dkan\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 ...\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 drupal\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 core.7.make.yml\n\u2502\u00a0\u00a0     ...\n\u251c\u2500\u2500 locks\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 civicrm.lock.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 demtools-civi.lock.yml\n\u2502\u00a0\u00a0 ...\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 drupal7.lock.yml\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 stubs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 civicrm.make.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 demtools-civi.make.yml\n\u2502\u00a0\u00a0 ...\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 drupal7.make.yml\n\u2514\u2500\u2500 tmp\n    \u2514\u2500\u2500 drush  There are 4 top-level directories: docs, includes, locks and stubs.  We examine\nthese in more detail later.  The locks and stubs directories simply contain\nlockfiles in the former, and stub makefiles in the latter, with no further\nhierarchy.  The \"includes\" directory, on the other hand, has subdirectories that contain\nmakefiles specific to each product.", 
            "title": "Filesystem layout"
        }, 
        {
            "location": "/STRUCTURE/#stubs", 
            "text": "Stubs are makefiles that usually do not contain any projects to download\ndirectly.  Instead, they include a version of core, and various other makefiles\nto build up a full platform.  In the example below, we see that the contents are pretty basic.  There is\ndocumentation throughout, as well as the basic Drush make \"api\" and \"core\"\nelements.  We also set a default sub-directory within which to download\nprojects.  This allows us to keep our included makefiles cleaner.  We then include a core makefile, module, civicrm, and extensions makefiles and a\ntheme makefile.  Note that we specify the location of the include file relative\nto the location of the stub.  core = 7.x\napi = 2\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;               Core               ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nincludes[] = ../includes/core.make\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;             Defaults             ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n; Specify common subdir\ndefaults[projects][subdir] = \"contrib\"\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;         Released Modules         ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nincludes[] = ../includes/modules.make\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;           CiviCRM core           ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nincludes[] = ../includes/civicrm.make\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;        CiviCRM Extensions        ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nincludes[] = ../includes/civicrm-extensions.make", 
            "title": "Stubs"
        }, 
        {
            "location": "/STRUCTURE/#includes", 
            "text": "In the includes directory we find a core makefile that includes a core\ndistribution and any patches we need to apply to Drupal.  These included\nmakefiles have standard headers similar to the stub makefile above.  In modules.make, we have a general list of modules.  This makefile lists all\nthe modules that will be downloaded as part of the platform.  We segment\nrelated modules into their own dedicated makefiles, if this helps organization\nor re-use.", 
            "title": "Includes"
        }, 
        {
            "location": "/STRUCTURE/#lockfiles", 
            "text": "Finally, the lockfiles directory includes makefiles that have been run through\n\"drush make-lock\" (see docs/MAINTENANCE.md).  This basically takes our stub\nmakefile, compiles all the inclusions, and then checks with drupal.org to\ndetermine the latest versions of all the components, just as if they were all\ngoing to be downloaded in a normal run of Drush make.  It then writes this out\ninto a new makefile that now specifies all the up-to-date versions.  This form\nof makefile is called a lockfile, similar to what we see with Composer or Gem.", 
            "title": "Lockfiles"
        }, 
        {
            "location": "/MAINTENANCE/", 
            "text": "NDI PLATFORMS\n\n\nThis document describes how to maintain locked makefiles.  To understand how to\nbuild platforms using them, please see USAGE.md.  To better understand how these\nmakefiles are structured, please see STRUCTURE.md.\n\n\nPlease follow the installation instructions in INSTALL.md, as we currently use\ngit versions of both Drush and an extension, make_diff.  The usage instructions\nbelow assume that you have followed those instructions exactly.\n\n\nMAINTENANCE\n\n\nFor simplicity, we use the (hypothetical) \"stubs/ndi-polls.make\" makefile in\nour examples.  Obviously, replace this with whichever platform stub makefile\nis appropriate.\n\n\nUpdate your makefiles\n\n\nFirst, we create a temporary lockfile based on a given platform stub:\n\n\n$ drush7 make --no-build --lock=/tmp/make.lock stubs/ndi-polls.make\nWrote .make file /tmp/make.lock\n\n\n\nNote: the --lock parameter does not work with the ~ path shortcut.\n\n\nThen, we compare it to the current lockfile, so we can see what changes have\noccurred:\n\n\n$ drush7 diff locks/ndi-polls.lock /tmp/make.lock --list=0\n Project  Old version  New version  Notices                            \n drupal   7.38         7.39         version upgraded, patches changed.\n\n\n\nInvestigate and fix any warnings as appropriate.  This will generally involve\npinning a version for a module.  This is done by commenting out the module from\nthe general modules list (i.e., includes/modules.make), then adding an entry\nin the modules pin list (e.g., includes/modules-pins.make):\n\n\n; The recommended release is on the 2.x branch, so we pin to the latest\n; supported version on the 1.x branch.\n; For updates, check: https://drupal.org/project/google_analytics\nprojects[goole_analytics][version] = 1\n\n\n\nIt is usually best to pin to a major version in this case, so that new releases\non that branch are incorporated automatically.\n\n\nRe-running the commands above should now no longer show any major version\nupgrade warnings.\n\n\nTest the new lockfile\n\n\nIt is usually worthwhile to test the new lockfile at this point.  For example,\nan update to a module could cause a patch to no longer apply.  Usually, in such\ncases, updating the patches makefile with a new patch, or simply removing\npatches that have been incorporated into the new release, will be sufficient to\nresolve any issues at this stage.\n\n\nAdding or changing patches or libraries, adding new modules or themes, and\nother such modifications can also cause build failures.  Running a test build is\nas simple as running drush make on the new lockfile:\n\n\n$ drush7 make /tmp/make.lock test_demtools\n\n\n\nFinalize the new lockfile\n\n\nOnce all changes and warnings are resolved or accepted, and documented, we copy\nthe temporary lockfile over the existing one in our repo:\n\n\n$ cp /tmp/make.lock locks/ndi-polls.lock\n\n\n\nThen commit these changes into git:\n\n\n$ git commit -am\"Update NDI's common platform.\"\n\n\n\nIt may also be useful to include the output of \"drush make-diff\" in the commit\nmessage.", 
            "title": "Maintenance"
        }, 
        {
            "location": "/MAINTENANCE/#ndi-platforms", 
            "text": "This document describes how to maintain locked makefiles.  To understand how to\nbuild platforms using them, please see USAGE.md.  To better understand how these\nmakefiles are structured, please see STRUCTURE.md.  Please follow the installation instructions in INSTALL.md, as we currently use\ngit versions of both Drush and an extension, make_diff.  The usage instructions\nbelow assume that you have followed those instructions exactly.", 
            "title": "NDI PLATFORMS"
        }, 
        {
            "location": "/MAINTENANCE/#maintenance", 
            "text": "For simplicity, we use the (hypothetical) \"stubs/ndi-polls.make\" makefile in\nour examples.  Obviously, replace this with whichever platform stub makefile\nis appropriate.", 
            "title": "MAINTENANCE"
        }, 
        {
            "location": "/MAINTENANCE/#update-your-makefiles", 
            "text": "First, we create a temporary lockfile based on a given platform stub:  $ drush7 make --no-build --lock=/tmp/make.lock stubs/ndi-polls.make\nWrote .make file /tmp/make.lock  Note: the --lock parameter does not work with the ~ path shortcut.  Then, we compare it to the current lockfile, so we can see what changes have\noccurred:  $ drush7 diff locks/ndi-polls.lock /tmp/make.lock --list=0\n Project  Old version  New version  Notices                            \n drupal   7.38         7.39         version upgraded, patches changed.  Investigate and fix any warnings as appropriate.  This will generally involve\npinning a version for a module.  This is done by commenting out the module from\nthe general modules list (i.e., includes/modules.make), then adding an entry\nin the modules pin list (e.g., includes/modules-pins.make):  ; The recommended release is on the 2.x branch, so we pin to the latest\n; supported version on the 1.x branch.\n; For updates, check: https://drupal.org/project/google_analytics\nprojects[goole_analytics][version] = 1  It is usually best to pin to a major version in this case, so that new releases\non that branch are incorporated automatically.  Re-running the commands above should now no longer show any major version\nupgrade warnings.", 
            "title": "Update your makefiles"
        }, 
        {
            "location": "/MAINTENANCE/#test-the-new-lockfile", 
            "text": "It is usually worthwhile to test the new lockfile at this point.  For example,\nan update to a module could cause a patch to no longer apply.  Usually, in such\ncases, updating the patches makefile with a new patch, or simply removing\npatches that have been incorporated into the new release, will be sufficient to\nresolve any issues at this stage.  Adding or changing patches or libraries, adding new modules or themes, and\nother such modifications can also cause build failures.  Running a test build is\nas simple as running drush make on the new lockfile:  $ drush7 make /tmp/make.lock test_demtools", 
            "title": "Test the new lockfile"
        }, 
        {
            "location": "/MAINTENANCE/#finalize-the-new-lockfile", 
            "text": "Once all changes and warnings are resolved or accepted, and documented, we copy\nthe temporary lockfile over the existing one in our repo:  $ cp /tmp/make.lock locks/ndi-polls.lock  Then commit these changes into git:  $ git commit -am\"Update NDI's common platform.\"  It may also be useful to include the output of \"drush make-diff\" in the commit\nmessage.", 
            "title": "Finalize the new lockfile"
        }, 
        {
            "location": "/DOCUMENTATION/", 
            "text": "NDI Platforms Documentation\n\n\nWe maintain the NDIplatform documentation site using\n\nmkdocs\n to build this site. To get started\ncontributing to this project, fork it on Github. Then install mkdocs and clone\nthis repo:\n\n\n# brew install python;               # For OSX users\n# sudo aptitude install python-pip   # For Debian/Ubuntu users\n# pip install mkdocs\n$ git clone https://github.com/NDItech/NDIplatforms.git\n$ cd NDIplatforms\n$ git remote add sandbox https://github.com/\nusername\n/NDIplatforms.git\n$ mkdocs serve\n\n\n\nYour local NDIplatforms docs site should now be available for browsing:\nhttp://127.0.0.1:8000/. When you find a typo, an error, unclear or missing\nexplanations or instructions, hit ctrl-c, to stop the server, and start\nediting. Find the page you\u2019d like to edit; everything is in the docs/\ndirectory. Make your changes, commit and push them, and start a pull request:\n\n\n$ git checkout -b fix_typo\n$ vim docs/index.md                     # Add/edit/remove whatever you see fit. Be bold!\n$ mkdocs build --clean; mkdocs serve    # Go check your changes. We\u2019ll wait...\n$ git diff                              # Make sure there aren\u2019t any unintended changes.\ndiff --git a/docs/index.md b/docs/index.md\n...\n$ git commit -am\u201dFixed typo.\u201d           # Useful commit message are a good habit.\n$ git push sandbox fix_typo\n\n\n\nVisit your fork on Github and start a Pull Request.", 
            "title": "Documentation"
        }, 
        {
            "location": "/DOCUMENTATION/#ndi-platforms-documentation", 
            "text": "We maintain the NDIplatform documentation site using mkdocs  to build this site. To get started\ncontributing to this project, fork it on Github. Then install mkdocs and clone\nthis repo:  # brew install python;               # For OSX users\n# sudo aptitude install python-pip   # For Debian/Ubuntu users\n# pip install mkdocs\n$ git clone https://github.com/NDItech/NDIplatforms.git\n$ cd NDIplatforms\n$ git remote add sandbox https://github.com/ username /NDIplatforms.git\n$ mkdocs serve  Your local NDIplatforms docs site should now be available for browsing:\nhttp://127.0.0.1:8000/. When you find a typo, an error, unclear or missing\nexplanations or instructions, hit ctrl-c, to stop the server, and start\nediting. Find the page you\u2019d like to edit; everything is in the docs/\ndirectory. Make your changes, commit and push them, and start a pull request:  $ git checkout -b fix_typo\n$ vim docs/index.md                     # Add/edit/remove whatever you see fit. Be bold!\n$ mkdocs build --clean; mkdocs serve    # Go check your changes. We\u2019ll wait...\n$ git diff                              # Make sure there aren\u2019t any unintended changes.\ndiff --git a/docs/index.md b/docs/index.md\n...\n$ git commit -am\u201dFixed typo.\u201d           # Useful commit message are a good habit.\n$ git push sandbox fix_typo  Visit your fork on Github and start a Pull Request.", 
            "title": "NDI Platforms Documentation"
        }
    ]
}