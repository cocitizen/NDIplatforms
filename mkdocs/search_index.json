{
    "docs": [
        {
            "location": "/", 
            "text": "NDI PLATFORMS \n\n\nNDIplatforms is a set of Drush makefiles structured for easy maintenance. It\nis used, along with the \nAegir Hosting System\n, to\nmaintain NDI's \nDemTools\n mass-hosting platform, DemCloud.\n\n\nNormal usage of NDIplatforms involves simply running Drush Make with one of the\nsupplied \"lock\" files. Lockfiles are simply makefiles with all versions\ncompletely specified. Further instructions can be found on the\n\nUsage\n section.\n\n\nNDIplatforms uses a particular directory layout to make maintaining makefiles\neasier. For a discussion on the reasoning behind this, see the\n\nStructure\n section.\n\n\nThe maintenance of NDIplatforms leverages a number of features that are new to\nDrush 8. See the \nInstall\n section for a detailed walk-through of\ninstalling NDIplatforms and its dependencies.\n\n\nA specific workflow was developed to maintain the \"lock\" files. This workflow\nis described in the \nMaintenance\n section.\n\n\nThis documentation is managed with \nmkdocs\n. For\ninformation on getting started, see the \nDocumentation\n\nsection.", 
            "title": "Home"
        }, 
        {
            "location": "/#ndi-platforms", 
            "text": "NDIplatforms is a set of Drush makefiles structured for easy maintenance. It\nis used, along with the  Aegir Hosting System , to\nmaintain NDI's  DemTools  mass-hosting platform, DemCloud.  Normal usage of NDIplatforms involves simply running Drush Make with one of the\nsupplied \"lock\" files. Lockfiles are simply makefiles with all versions\ncompletely specified. Further instructions can be found on the Usage  section.  NDIplatforms uses a particular directory layout to make maintaining makefiles\neasier. For a discussion on the reasoning behind this, see the Structure  section.  The maintenance of NDIplatforms leverages a number of features that are new to\nDrush 8. See the  Install  section for a detailed walk-through of\ninstalling NDIplatforms and its dependencies.  A specific workflow was developed to maintain the \"lock\" files. This workflow\nis described in the  Maintenance  section.  This documentation is managed with  mkdocs . For\ninformation on getting started, see the  Documentation \nsection.", 
            "title": "NDI PLATFORMS"
        }, 
        {
            "location": "/install/", 
            "text": "INSTALLATION\n\n\nDownload\n\n\nDownload NDIplatforms somewhere convenient, such as:\n\n\n$ \ngit clone https://github.com/nditech/NDIplatforms.git ~/makefiles/NDIplatforms\n\n$ \ncd\n ~/makefiles/NDIplatforms\n\n\n\n\n\nInstall\n\n\nTo use the latest version of NDIplatforms effectively, you need a recent version\nof Drush. As such, we recommend using a local Drush install, so as not to\ninterfere with other Drush functionality on the server.\n\n\nThere are various options available, that are explained further in the next\nsection. Use the following command to install the recommended version of Drush:\n\n\n$ \nmake install\nSwitched to branch \ndev/2000\n\n\n[\n...\n]\n\n Drush git branch: dev/2000\n\n\n\n\n\nInstall Drush\n\n\nIf you prefer to use the latest release of Drush:\n\n\n$ \nmake drush\n Drush Version   :  8.0.3\n\n\n\n\n\nAlternatively, you might want to use the latest (unstable) Drush development\nbuild:\n\n\n$ \nmake drush-unstable\n Drush Version   :  8.1-dev\n\n\n\n\n\nYou could also deploy Drush from source code:\n\n\n$ \nmake drush-source\nAlready on \nmaster\n\n\n[\n...\n]\n\nAll settings correct \nfor\n using Composer\nDownloading...\n\n[\n...\n]\n\n Drush Version   :  8.1-dev\n\n\n\n\n\nFinally, deploying Drush from source code allows the use of arbitrary branches\n(from a PR, for example):\n\n\n$ \nmake drush-source \nbranch\n=\ndev/2000\nSwitched to branch \ndev/2000\n\n\n[\n...\n]\n\n Drush git branch: dev/2000", 
            "title": "Install"
        }, 
        {
            "location": "/install/#installation", 
            "text": "", 
            "title": "INSTALLATION"
        }, 
        {
            "location": "/install/#download", 
            "text": "Download NDIplatforms somewhere convenient, such as:  $  git clone https://github.com/nditech/NDIplatforms.git ~/makefiles/NDIplatforms $  cd  ~/makefiles/NDIplatforms", 
            "title": "Download"
        }, 
        {
            "location": "/install/#install", 
            "text": "To use the latest version of NDIplatforms effectively, you need a recent version\nof Drush. As such, we recommend using a local Drush install, so as not to\ninterfere with other Drush functionality on the server.  There are various options available, that are explained further in the next\nsection. Use the following command to install the recommended version of Drush:  $  make install\nSwitched to branch  dev/2000  [ ... ] \n Drush git branch: dev/2000", 
            "title": "Install"
        }, 
        {
            "location": "/install/#install-drush", 
            "text": "If you prefer to use the latest release of Drush:  $  make drush\n Drush Version   :  8.0.3  Alternatively, you might want to use the latest (unstable) Drush development\nbuild:  $  make drush-unstable\n Drush Version   :  8.1-dev  You could also deploy Drush from source code:  $  make drush-source\nAlready on  master  [ ... ] \nAll settings correct  for  using Composer\nDownloading... [ ... ] \n Drush Version   :  8.1-dev  Finally, deploying Drush from source code allows the use of arbitrary branches\n(from a PR, for example):  $  make drush-source  branch = dev/2000\nSwitched to branch  dev/2000  [ ... ] \n Drush git branch: dev/2000", 
            "title": "Install Drush"
        }, 
        {
            "location": "/usage/", 
            "text": "USAGE\n\n\nThis section describes building platforms using the NDIplatforms stub Drush\nmakefiles. To understand how these makefiles are maintained, please see\nthe \nMaintenance\n section.\n\n\nGNU Make\n\n\nWhile most of Drupal platform creation refers to Drush makefiles, this project\nincludes a \nGNU Makefile\n to simplify its\nusage. To see what commands are available, run:\n\n\n$ \nmake list\n\n\n\n\n\nFor simplicity, we use the \"demtools/dkan\" platform in our examples. Obviously,\nreplace this with whichever platform stub makefile is appropriate.\n\n\nTest a platform build\n\n\nBefore proceeding with deploying a platform for production use, it can be\nuseful to run a test build, to see if there are any errors in the lockfile.\nNote that we run \nautomated tests\n\nto build the DemTools platforms after each code push to the NDIplatforms\nproject. However, changes to included project (e.g., reference git branch\ndeleted) since then might cause a build to break.\n\n\nTo run a test build, simply run:\n\n\n$ \nmake demtools/dkan-test\nBeginning to build demtools/dkan.lock.yml.                           \n[\nok\n]\n\ndrupal-7.42 downloaded.                                              \n[\nok\n]\n\n\n[\n...\n]\n\n\n\n\n\n\nEach DemTools platform (demtools/dkan, demtools/civicrm, etc.) have such a test\ncommand defined (although it may not show up in the \nmake list\n output).\n\n\nNote that running such a test will re-compile any relevant lockfiles whise\nsources have changed. See the \nStructure\n and\n\nMaintenance\n sections for further details.\n\n\nBuild a platform\n\n\nThe easiest way to build a platform is to use the provided Make commands:\n\n\n$ \nmake demtools/dkan-platform\nBeginning to build demtools/dkan.lock.yml.                           \n[\nok\n]\n\ndrupal-7.42 downloaded.                                              \n[\nok\n]\n\n\n[\n...\n]\n\n\n\n\n\n\nEach DemTools platform (demtools/dkan, demtools/civicrm, etc.) have such a\nplatform build command defined (although it may not show up in the \nmake list\n\noutput).\n\n\nThis command will build the platform to the usual production path on a stock\nAegir system, create an Aegir \"context\" (Drush alias), and import the resulting\nplatform into the Aegir front-end.\n\n\nThe resulting platform will incorporate a date-stamp to make it simple to see\nwhich is the most current. If multiple platforms of the same type are required\nduring the course of a single day (e.g., for iterative bug fixing and testing),\nwe can include a revision counter to keep platforms and aliases unique. To do\nso, simply add \ninc=\nsuffix\n when calling the platform build command:\n\n\n$ \nmake demtools/dkan-platform \ninc\n=\na\nBeginning to build demtools/dkan.lock.yml.                           \n[\nok\n]\n\ndrupal-7.42 downloaded.                                              \n[\nok\n]\n\n\n[\n...\n]\n\n\n\n\n\n\nBuild a platform on the command-line\n\n\nTo build a platform (also referred to as a code-base), we can also use Drush\nMake directly, along with our lockfiles. We start by simply calling Drush make\n(usually as the \"aegir\" user):\n\n\n$ \ndrush make ~/makefiles/NDIplatforms/demtools/dkan.lock.yml ~/platforms/DemTools_DKAN_2016--2-22\nBeginning to build demtools/dkan.lock.yml.                           \n[\nok\n]\n\ndrupal-7.42 downloaded.                                              \n[\nok\n]\n\n\n[\n...\n]\n\n\n\n\n\n\nAssuming that the platform build worked, we then need to tell Aegir about it.\nThe easiest way to do that is to visit \n/node/add/platform\n on the Aegir site.\nWe then need to provide a name, such as \"DemTools_DKAN_2016-02-22\", and specify\nthe path where we built it.\n\n\nThis can also be accomplished at the command-line by running the provision-save\nand hosting-import Drush commands provided by Aegir. However, this is a very\nadvanced technique which we will not cover here.  Use the \"--help\" option with\nthese commands to see how they work, or check out our use in the Makefile that\nships with NDIplatforms.\n\n\nBuild a platform in the Aegir UI\n\n\nAlternatively, we can build the platform directly from within the Aegir UI.\nThis is the preferred method, as it:\n\n\n\n\nmakes the output of the platform build available in the task log;\n\n\ncreates a link to the makefile that was used in building the platform; and\n\n\navoids having to import the platform separately.\n\n\n\n\nHowever, YAML-formatted makefiles require Drush 8, which only shipped with\nAegir Debian packages starting in version 3.4. As a result, building from the\ncommand line may be required, if you are using an older version.\n\n\nFirst, find the lockfile we want to use to build the platform on Github, such\nas https://github.com/nditech/NDIplatforms/blob/master/locks/ndi-polls.lock.yml.\nThen click the \"Raw\" button to get a link to the output that Drush Make can\naccept. Copy that URL into the \"makefile\" field on \"/node/add/platform\" on the\nAegir site. Then provide a meaningful name, such as \"DemTools_2015-10-21\", and\nclick \"Save\".\n\n\nThat should be all that is required. In the background, Aegir will download the\nmakefile, run Drush Make, and register the platform. You should see a link to\nthe makefile used in creating the platform. This is useful to determine the\nexact platform contents, or for re-creating the platform elsewhere, such as on\na different server.", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#usage", 
            "text": "This section describes building platforms using the NDIplatforms stub Drush\nmakefiles. To understand how these makefiles are maintained, please see\nthe  Maintenance  section.", 
            "title": "USAGE"
        }, 
        {
            "location": "/usage/#gnu-make", 
            "text": "While most of Drupal platform creation refers to Drush makefiles, this project\nincludes a  GNU Makefile  to simplify its\nusage. To see what commands are available, run:  $  make list  For simplicity, we use the \"demtools/dkan\" platform in our examples. Obviously,\nreplace this with whichever platform stub makefile is appropriate.", 
            "title": "GNU Make"
        }, 
        {
            "location": "/usage/#test-a-platform-build", 
            "text": "Before proceeding with deploying a platform for production use, it can be\nuseful to run a test build, to see if there are any errors in the lockfile.\nNote that we run  automated tests \nto build the DemTools platforms after each code push to the NDIplatforms\nproject. However, changes to included project (e.g., reference git branch\ndeleted) since then might cause a build to break.  To run a test build, simply run:  $  make demtools/dkan-test\nBeginning to build demtools/dkan.lock.yml.                            [ ok ] \ndrupal-7.42 downloaded.                                               [ ok ]  [ ... ]   Each DemTools platform (demtools/dkan, demtools/civicrm, etc.) have such a test\ncommand defined (although it may not show up in the  make list  output).  Note that running such a test will re-compile any relevant lockfiles whise\nsources have changed. See the  Structure  and Maintenance  sections for further details.", 
            "title": "Test a platform build"
        }, 
        {
            "location": "/usage/#build-a-platform", 
            "text": "The easiest way to build a platform is to use the provided Make commands:  $  make demtools/dkan-platform\nBeginning to build demtools/dkan.lock.yml.                            [ ok ] \ndrupal-7.42 downloaded.                                               [ ok ]  [ ... ]   Each DemTools platform (demtools/dkan, demtools/civicrm, etc.) have such a\nplatform build command defined (although it may not show up in the  make list \noutput).  This command will build the platform to the usual production path on a stock\nAegir system, create an Aegir \"context\" (Drush alias), and import the resulting\nplatform into the Aegir front-end.  The resulting platform will incorporate a date-stamp to make it simple to see\nwhich is the most current. If multiple platforms of the same type are required\nduring the course of a single day (e.g., for iterative bug fixing and testing),\nwe can include a revision counter to keep platforms and aliases unique. To do\nso, simply add  inc= suffix  when calling the platform build command:  $  make demtools/dkan-platform  inc = a\nBeginning to build demtools/dkan.lock.yml.                            [ ok ] \ndrupal-7.42 downloaded.                                               [ ok ]  [ ... ]", 
            "title": "Build a platform"
        }, 
        {
            "location": "/usage/#build-a-platform-on-the-command-line", 
            "text": "To build a platform (also referred to as a code-base), we can also use Drush\nMake directly, along with our lockfiles. We start by simply calling Drush make\n(usually as the \"aegir\" user):  $  drush make ~/makefiles/NDIplatforms/demtools/dkan.lock.yml ~/platforms/DemTools_DKAN_2016--2-22\nBeginning to build demtools/dkan.lock.yml.                            [ ok ] \ndrupal-7.42 downloaded.                                               [ ok ]  [ ... ]   Assuming that the platform build worked, we then need to tell Aegir about it.\nThe easiest way to do that is to visit  /node/add/platform  on the Aegir site.\nWe then need to provide a name, such as \"DemTools_DKAN_2016-02-22\", and specify\nthe path where we built it.  This can also be accomplished at the command-line by running the provision-save\nand hosting-import Drush commands provided by Aegir. However, this is a very\nadvanced technique which we will not cover here.  Use the \"--help\" option with\nthese commands to see how they work, or check out our use in the Makefile that\nships with NDIplatforms.", 
            "title": "Build a platform on the command-line"
        }, 
        {
            "location": "/usage/#build-a-platform-in-the-aegir-ui", 
            "text": "Alternatively, we can build the platform directly from within the Aegir UI.\nThis is the preferred method, as it:   makes the output of the platform build available in the task log;  creates a link to the makefile that was used in building the platform; and  avoids having to import the platform separately.   However, YAML-formatted makefiles require Drush 8, which only shipped with\nAegir Debian packages starting in version 3.4. As a result, building from the\ncommand line may be required, if you are using an older version.  First, find the lockfile we want to use to build the platform on Github, such\nas https://github.com/nditech/NDIplatforms/blob/master/locks/ndi-polls.lock.yml.\nThen click the \"Raw\" button to get a link to the output that Drush Make can\naccept. Copy that URL into the \"makefile\" field on \"/node/add/platform\" on the\nAegir site. Then provide a meaningful name, such as \"DemTools_2015-10-21\", and\nclick \"Save\".  That should be all that is required. In the background, Aegir will download the\nmakefile, run Drush Make, and register the platform. You should see a link to\nthe makefile used in creating the platform. This is useful to determine the\nexact platform contents, or for re-creating the platform elsewhere, such as on\na different server.", 
            "title": "Build a platform in the Aegir UI"
        }, 
        {
            "location": "/structure/", 
            "text": "STRUCTURE\n\n\nThis section describes the filesystem layout for NDIplatforms Drush makefiles.\nTo understand how to use them to build platforms, please see the\n\nUsage\n section. To better understand how these makefiles are\nmaintained, please see the \nMaintenance\n section.\n\n\nFilesystem layout\n\n\nFor simplicity, we are limiting our discussion to the DemTools Civi platform.\nSeveral more platforms are included in NDIplatforms, and this system scales\nvery well. However, listing them all here would complicate explanations.\n\n\nDrush makefiles allow for the inclusion of other makefiles.  In order to reduce\nduplication and encourage these makefiles to be self-documenting, NDIplatforms\nmakes extensive use of makefile includes.\n\n\nHere is the (abridged) layout of files and directories:\n\n\n$ \ntree\n.\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 ...\n\u251c\u2500\u2500 includes\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 civicrm\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 civicrm.make.yml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 custom.make.yml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 ...\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dkan\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 ...\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 drupal\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 core.7.make.yml\n\u2502\u00a0\u00a0     ...\n\u251c\u2500\u2500 locks\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 civicrm.lock.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 demtools-civi.lock.yml\n\u2502\u00a0\u00a0 ...\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 drupal7.lock.yml\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 stubs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 civicrm.make.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 demtools-civi.make.yml\n\u2502\u00a0\u00a0 ...\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 drupal7.make.yml\n\u2514\u2500\u2500 tmp\n    \u2514\u2500\u2500 drush\n\n\n\n\n\nThere are 4 top-level directories: docs, includes, locks and stubs.  We examine\nthese in more detail later.  The locks and stubs directories simply contain\nlockfiles in the former, and stub makefiles in the latter, with no further\nhierarchy.\n\n\nThe \"includes\" directory, on the other hand, has subdirectories that contain\nmakefiles specific to each product.\n\n\nStubs\n\n\nStubs are makefiles that usually do not contain any projects to download\ndirectly. Instead, they include a version of core, and various other makefiles\nto build up a full platform. Stub makefiles are suffixes with \n.build.yml\n.\n\n\nIn the example below, we see that the contents are pretty basic.  There is\ndocumentation throughout, as well as the basic Drush make \"api\" and \"core\"\nelements.  We also set a default sub-directory within which to download\nprojects.  This allows us to keep our included makefiles cleaner.\n\n\nWe then include a core makefile, module, civicrm, and extensions makefiles and a\ntheme makefile.  Note that we specify the location of the include file relative\nto the location of the stub.\n\n\ncore = 7.x\napi = 2\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;               Core               ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nincludes[] = ../includes/core.make\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;             Defaults             ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n; Specify common subdir\ndefaults[projects][subdir] = \ncontrib\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;         Released Modules         ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nincludes[] = ../includes/modules.make\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;           CiviCRM core           ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nincludes[] = ../includes/civicrm.make\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;        CiviCRM Extensions        ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nincludes[] = ../includes/civicrm-extensions.make\n\n\n\n\n\nIncludes\n\n\nIn the includes directory we find a core makefile that includes a core\ndistribution and any patches we need to apply to Drupal.  These included\nmakefiles have standard headers similar to the stub makefile above.\n\n\nIn modules.make, we have a general list of modules.  This makefile lists all\nthe modules that will be downloaded as part of the platform.  We segment\nrelated modules into their own dedicated makefiles, if this helps organization\nor re-use.\n\n\nLockfiles\n\n\nFinally, the lockfiles directory includes makefiles that have been run through\n\"drush make-lock\" (see docs/MAINTENANCE.md).  This basically takes our stub\nmakefile, compiles all the inclusions, and then checks with drupal.org to\ndetermine the latest versions of all the components, just as if they were all\ngoing to be downloaded in a normal run of Drush make.  It then writes this out\ninto a new makefile that now specifies all the up-to-date versions.  This form\nof makefile is called a lockfile, similar to what we see with Composer or Gem.", 
            "title": "Structure"
        }, 
        {
            "location": "/structure/#structure", 
            "text": "This section describes the filesystem layout for NDIplatforms Drush makefiles.\nTo understand how to use them to build platforms, please see the Usage  section. To better understand how these makefiles are\nmaintained, please see the  Maintenance  section.", 
            "title": "STRUCTURE"
        }, 
        {
            "location": "/structure/#filesystem-layout", 
            "text": "For simplicity, we are limiting our discussion to the DemTools Civi platform.\nSeveral more platforms are included in NDIplatforms, and this system scales\nvery well. However, listing them all here would complicate explanations.  Drush makefiles allow for the inclusion of other makefiles.  In order to reduce\nduplication and encourage these makefiles to be self-documenting, NDIplatforms\nmakes extensive use of makefile includes.  Here is the (abridged) layout of files and directories:  $  tree\n.\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 ...\n\u251c\u2500\u2500 includes\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 civicrm\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 civicrm.make.yml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 custom.make.yml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 ...\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dkan\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 ...\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 drupal\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 core.7.make.yml\n\u2502\u00a0\u00a0     ...\n\u251c\u2500\u2500 locks\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 civicrm.lock.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 demtools-civi.lock.yml\n\u2502\u00a0\u00a0 ...\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 drupal7.lock.yml\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 stubs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 civicrm.make.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 demtools-civi.make.yml\n\u2502\u00a0\u00a0 ...\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 drupal7.make.yml\n\u2514\u2500\u2500 tmp\n    \u2514\u2500\u2500 drush  There are 4 top-level directories: docs, includes, locks and stubs.  We examine\nthese in more detail later.  The locks and stubs directories simply contain\nlockfiles in the former, and stub makefiles in the latter, with no further\nhierarchy.  The \"includes\" directory, on the other hand, has subdirectories that contain\nmakefiles specific to each product.", 
            "title": "Filesystem layout"
        }, 
        {
            "location": "/structure/#stubs", 
            "text": "Stubs are makefiles that usually do not contain any projects to download\ndirectly. Instead, they include a version of core, and various other makefiles\nto build up a full platform. Stub makefiles are suffixes with  .build.yml .  In the example below, we see that the contents are pretty basic.  There is\ndocumentation throughout, as well as the basic Drush make \"api\" and \"core\"\nelements.  We also set a default sub-directory within which to download\nprojects.  This allows us to keep our included makefiles cleaner.  We then include a core makefile, module, civicrm, and extensions makefiles and a\ntheme makefile.  Note that we specify the location of the include file relative\nto the location of the stub.  core = 7.x\napi = 2\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;               Core               ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nincludes[] = ../includes/core.make\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;             Defaults             ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n; Specify common subdir\ndefaults[projects][subdir] =  contrib \n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;         Released Modules         ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nincludes[] = ../includes/modules.make\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;           CiviCRM core           ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nincludes[] = ../includes/civicrm.make\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;        CiviCRM Extensions        ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nincludes[] = ../includes/civicrm-extensions.make", 
            "title": "Stubs"
        }, 
        {
            "location": "/structure/#includes", 
            "text": "In the includes directory we find a core makefile that includes a core\ndistribution and any patches we need to apply to Drupal.  These included\nmakefiles have standard headers similar to the stub makefile above.  In modules.make, we have a general list of modules.  This makefile lists all\nthe modules that will be downloaded as part of the platform.  We segment\nrelated modules into their own dedicated makefiles, if this helps organization\nor re-use.", 
            "title": "Includes"
        }, 
        {
            "location": "/structure/#lockfiles", 
            "text": "Finally, the lockfiles directory includes makefiles that have been run through\n\"drush make-lock\" (see docs/MAINTENANCE.md).  This basically takes our stub\nmakefile, compiles all the inclusions, and then checks with drupal.org to\ndetermine the latest versions of all the components, just as if they were all\ngoing to be downloaded in a normal run of Drush make.  It then writes this out\ninto a new makefile that now specifies all the up-to-date versions.  This form\nof makefile is called a lockfile, similar to what we see with Composer or Gem.", 
            "title": "Lockfiles"
        }, 
        {
            "location": "/maintenance/", 
            "text": "MAINTENANCE\n\n\nThis section describes how to maintain Drush Make lockfiles. To understand how\nto build platforms using them, please see the \nUsage\n section. To\nbetter understand how these makefiles are structured, please see the\n\nStructure\n section.\n\n\nPlease follow the installation instructions in the \nInstall\n\nsection, as we currently recommend using a git version of Drush. The usage\ninstructions below assume that you have followed those instructions exactly.\n\n\nFor simplicity, we use the \"demtools/dkan\" project in our examples. Obviously,\nreplace this with whichever platform is appropriate.\n\n\nDrush Make lockfiles\n\n\nThe principle benefit of using lockfiles, over regular makefiles, is that they\nallow us to build the same platform in a repeatable fashion. A lockfile is\nsimply a type of makefile generated by Drush, that specifies all the versions\nfor all the included projects. Otherwise, we might get a different platform\neach time we build, depending on how many projects we include, their release\ncycle and/or the pace of their development.\n\n\nAlso, lockfiles allow us to build platforms using the lockfiles remotely,\nwithout having to be concerned with any includes being specified locally. For\nexample, we can use the raw output of a git repository containing such a\nlockfile, and be confident that any subseqent platform built with that same URL\nwill be identical.\n\n\nUpdate your makefiles\n\n\nFirst, we create a temporary lockfile based on a given platform stub:\n\n\n$ \ndrush7 make --no-build --lock\n=\n/tmp/make.lock stubs/ndi-polls.make\nWrote .make file /tmp/make.lock\n\n\n\n\n\nNote: the --lock parameter does not work with the ~ path shortcut.\n\n\nThen, we compare it to the current lockfile, so we can see what changes have\noccurred:\n\n\n$ \ndrush7 diff locks/ndi-polls.lock /tmp/make.lock --list\n=\n0\n Project  Old version  New version  Notices                            \n drupal   7.38         7.39         version upgraded, patches changed.\n\n\n\n\n\nInvestigate and fix any warnings as appropriate.  This will generally involve\npinning a version for a module.  This is done by commenting out the module from\nthe general modules list (i.e., includes/modules.make), then adding an entry\nin the modules pin list (e.g., includes/modules-pins.make):\n\n\n; The recommended release is on the 2.x branch, so we pin to the latest\n; supported version on the 1.x branch.\n; For updates, check: https://drupal.org/project/google_analytics\nprojects[goole_analytics][version] = 1\n\n\n\n\n\nIt is usually best to pin to a major version in this case, so that new releases\non that branch are incorporated automatically.\n\n\nRe-running the commands above should now no longer show any major version\nupgrade warnings.\n\n\nTest the new lockfile\n\n\nIt is usually worthwhile to test the new lockfile at this point. For example,\nan update to a module could cause a patch to no longer apply. Usually, in such\ncases, updating the makefile with a new patch, or simply removing patches that\nhave been incorporated into the new release, will be sufficient to resolve any\nissues at this stage.\n\n\nAdding or changing patches or libraries, adding new modules or themes, and\nother such modifications can also cause build failures. Running a test build is\nas simple as running drush make on the new lockfile:\n\n\n$ \ndrush7 make /tmp/make.lock test_demtools\n\n\n\n\n\nFinalize the new lockfile\n\n\nOnce all changes and warnings are resolved or accepted, and documented, we copy\nthe temporary lockfile over the existing one in our repo:\n\n\n$ \ncp /tmp/make.lock locks/ndi-polls.lock\n\n\n\n\n\nThen commit these changes into git:\n\n\n$ \ngit commit -am\nUpdate NDI\ns common platform.\n\n\n\n\n\n\nIt may also be useful to include the output of \"drush make-diff\" in the commit\nmessage.", 
            "title": "Maintenance"
        }, 
        {
            "location": "/maintenance/#maintenance", 
            "text": "This section describes how to maintain Drush Make lockfiles. To understand how\nto build platforms using them, please see the  Usage  section. To\nbetter understand how these makefiles are structured, please see the Structure  section.  Please follow the installation instructions in the  Install \nsection, as we currently recommend using a git version of Drush. The usage\ninstructions below assume that you have followed those instructions exactly.  For simplicity, we use the \"demtools/dkan\" project in our examples. Obviously,\nreplace this with whichever platform is appropriate.", 
            "title": "MAINTENANCE"
        }, 
        {
            "location": "/maintenance/#drush-make-lockfiles", 
            "text": "The principle benefit of using lockfiles, over regular makefiles, is that they\nallow us to build the same platform in a repeatable fashion. A lockfile is\nsimply a type of makefile generated by Drush, that specifies all the versions\nfor all the included projects. Otherwise, we might get a different platform\neach time we build, depending on how many projects we include, their release\ncycle and/or the pace of their development.  Also, lockfiles allow us to build platforms using the lockfiles remotely,\nwithout having to be concerned with any includes being specified locally. For\nexample, we can use the raw output of a git repository containing such a\nlockfile, and be confident that any subseqent platform built with that same URL\nwill be identical.", 
            "title": "Drush Make lockfiles"
        }, 
        {
            "location": "/maintenance/#update-your-makefiles", 
            "text": "First, we create a temporary lockfile based on a given platform stub:  $  drush7 make --no-build --lock = /tmp/make.lock stubs/ndi-polls.make\nWrote .make file /tmp/make.lock  Note: the --lock parameter does not work with the ~ path shortcut.  Then, we compare it to the current lockfile, so we can see what changes have\noccurred:  $  drush7 diff locks/ndi-polls.lock /tmp/make.lock --list = 0\n Project  Old version  New version  Notices                            \n drupal   7.38         7.39         version upgraded, patches changed.  Investigate and fix any warnings as appropriate.  This will generally involve\npinning a version for a module.  This is done by commenting out the module from\nthe general modules list (i.e., includes/modules.make), then adding an entry\nin the modules pin list (e.g., includes/modules-pins.make):  ; The recommended release is on the 2.x branch, so we pin to the latest\n; supported version on the 1.x branch.\n; For updates, check: https://drupal.org/project/google_analytics\nprojects[goole_analytics][version] = 1  It is usually best to pin to a major version in this case, so that new releases\non that branch are incorporated automatically.  Re-running the commands above should now no longer show any major version\nupgrade warnings.", 
            "title": "Update your makefiles"
        }, 
        {
            "location": "/maintenance/#test-the-new-lockfile", 
            "text": "It is usually worthwhile to test the new lockfile at this point. For example,\nan update to a module could cause a patch to no longer apply. Usually, in such\ncases, updating the makefile with a new patch, or simply removing patches that\nhave been incorporated into the new release, will be sufficient to resolve any\nissues at this stage.  Adding or changing patches or libraries, adding new modules or themes, and\nother such modifications can also cause build failures. Running a test build is\nas simple as running drush make on the new lockfile:  $  drush7 make /tmp/make.lock test_demtools", 
            "title": "Test the new lockfile"
        }, 
        {
            "location": "/maintenance/#finalize-the-new-lockfile", 
            "text": "Once all changes and warnings are resolved or accepted, and documented, we copy\nthe temporary lockfile over the existing one in our repo:  $  cp /tmp/make.lock locks/ndi-polls.lock  Then commit these changes into git:  $  git commit -am Update NDI s common platform.   It may also be useful to include the output of \"drush make-diff\" in the commit\nmessage.", 
            "title": "Finalize the new lockfile"
        }, 
        {
            "location": "/documentation/", 
            "text": "NDI Platforms Documentation\n\n\nWe maintain the NDIplatform documentation site using\n\nmkdocs\n to build this site. To get started\ncontributing to this project, fork it on Github. Then install mkdocs and clone\nthis repo:\n\n\n$ \nsudo brew install python              \n# For OSX users\n\n\n$ \nsudo aptitude install python-pip      \n# For Debian/Ubuntu users\n\n\n$ \nsudo pip install mkdocs\n\n$ \ngit clone https://github.com/NDItech/NDIplatforms.git\n\n$ \ncd \nNDIplatforms\n\n$ \ngit remote add sandbox https://github.com/\nusername\n/NDIplatforms.git\n\n$ \nmkdocs serve\n\n\n\n\n\nYour local NDIplatforms docs site should now be available for browsing:\n\nhttp://127.0.0.1:8000/\n. When you find a typo, an error, unclear or missing\nexplanations or instructions, hit ctrl-c, to stop the server, and start\nediting. Find the page you\u2019d like to edit; everything is in the docs/\ndirectory. Make your changes, commit and push them, and start a pull request:\n\n\n$ \ngit checkout -b fix_typo\n\n$ \nvim docs/index.md                     \n# Add/edit/remove whatever you see fit. Be bold!\n\n\n$ \nmkdocs build --clean\n;\n mkdocs serve    \n# Go check your changes. We\u2019ll wait...\n\n\n$ \ngit diff                              \n# Make sure there aren\u2019t any unintended changes.\n\ndiff --git a/docs/index.md b/docs/index.md\n...\n\n$ \ngit commit -am\u201dFixed typo.\u201d           \n# Useful commit message are a good habit.\n\n\n$ \ngit push sandbox fix_typo\n\n\n\n\n\nVisit your fork on Github and start a Pull Request.", 
            "title": "Documentation"
        }, 
        {
            "location": "/documentation/#ndi-platforms-documentation", 
            "text": "We maintain the NDIplatform documentation site using mkdocs  to build this site. To get started\ncontributing to this project, fork it on Github. Then install mkdocs and clone\nthis repo:  $  sudo brew install python               # For OSX users  $  sudo aptitude install python-pip       # For Debian/Ubuntu users  $  sudo pip install mkdocs $  git clone https://github.com/NDItech/NDIplatforms.git $  cd  NDIplatforms $  git remote add sandbox https://github.com/ username /NDIplatforms.git $  mkdocs serve  Your local NDIplatforms docs site should now be available for browsing: http://127.0.0.1:8000/ . When you find a typo, an error, unclear or missing\nexplanations or instructions, hit ctrl-c, to stop the server, and start\nediting. Find the page you\u2019d like to edit; everything is in the docs/\ndirectory. Make your changes, commit and push them, and start a pull request:  $  git checkout -b fix_typo $  vim docs/index.md                      # Add/edit/remove whatever you see fit. Be bold!  $  mkdocs build --clean ;  mkdocs serve     # Go check your changes. We\u2019ll wait...  $  git diff                               # Make sure there aren\u2019t any unintended changes. \ndiff --git a/docs/index.md b/docs/index.md\n... $  git commit -am\u201dFixed typo.\u201d            # Useful commit message are a good habit.  $  git push sandbox fix_typo  Visit your fork on Github and start a Pull Request.", 
            "title": "NDI Platforms Documentation"
        }
    ]
}